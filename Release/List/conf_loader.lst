##############################################################################
#                                                                            #
# IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION    12/Feb/2011  21:40:26 #
# Copyright 1999-2005 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Cpu mode        =  interwork                                            #
#    Endian          =  little                                               #
#    Stack alignment =  4                                                    #
#    Source file     =  C:\Users\Faby\Desktop\StudyElf\Anoying               #
#                       Alarm\conf_loader.cpp                                #
#    Command line    =  "C:\Users\Faby\Desktop\StudyElf\Anoying              #
#                       Alarm\conf_loader.cpp" -D NDEBUG -D OLDFUNCTIONS     #
#                       -lCN "C:\Users\Faby\Desktop\StudyElf\Anoying         #
#                       Alarm\Release\List\" -la "C:\Users\Faby\Desktop\Stud #
#                       yElf\Anoying Alarm\Release\List\" -o                 #
#                       "C:\Users\Faby\Desktop\StudyElf\Anoying              #
#                       Alarm\Release\Obj\" -s9 --no_unroll                  #
#                       --no_code_motion --cpu_mode arm --endian little      #
#                       --cpu ARM926EJ-S --stack_align 4 --interwork -e      #
#                       --enable_multibytes --fpu None --eec++               #
#                       --dlib_config "C:\Users\Faby\EmbebedIAR\Embedded     #
#                       Workbench 4.0 Evaluation\ARM\LIB\dl5tpainl8n.h" -I   #
#                       "C:\Users\Faby\EmbebedIAR\Embedded Workbench 4.0     #
#                       Evaluation\ARM\INC\" --inline_threshold=2            #
#    List file       =  C:\Users\Faby\Desktop\StudyElf\Anoying               #
#                       Alarm\Release\List\conf_loader.lst                   #
#    Object file     =  C:\Users\Faby\Desktop\StudyElf\Anoying               #
#                       Alarm\Release\Obj\conf_loader.r79                    #
#                                                                            #
#                                                                            #
##############################################################################

C:\Users\Faby\Desktop\StudyElf\Anoying Alarm\conf_loader.cpp
      1          #include "..\\include\Lib_Clara.h"
      2          #include "..\\include\Dir.h"
      3          #include "..\\include\cfg_items.h"
      4          #include "conf_loader.h"
      5          
      6          

   \                                 In segment DATA_I, align 4, align-sorted
      7          const wchar_t *successed_config_path=L"";
   \                     successed_config_path:
   \   00000000                      DS8 4
   \   00000004                      REQUIRE `?<Initializer for successed_config_path>`
      8          const wchar_t *successed_config_name=L"";
   \                     successed_config_name:
   \   00000004                      DS8 4
   \   00000008                      REQUIRE `?<Initializer for successed_config_name>`
      9          
     10          #pragma segment="CONFIG_C"

   \                                 In segment CODE, align 4, keep-with-next
     11          int LoadConfigData(const wchar_t *path,const wchar_t *fname)
     12          {
   \                     ??LoadConfigData:
   \   00000000   F0472DE9           PUSH     {R4-R10,LR}
     13            int f;
     14            char *buf;
     15            int result=-1;
     16            void *cfg;
     17            FSTAT _fstat;
     18            unsigned int rlen;
     19          
     20            cfg=(char *)__segment_begin("CONFIG_C");
     21          
     22            unsigned int len=(char *)__segment_end("CONFIG_C")-(char *)__segment_begin("CONFIG_C");
   \   00000004   04719FE5           LDR      R7,??LoadConfigData_1  ;; SFE(CONFIG_C) - SFB(CONFIG_C)
   \   00000008   1CD04DE2           SUB      SP,SP,#+28
   \   0000000C   0040A0E1           MOV      R4,R0
   \   00000010   0150A0E1           MOV      R5,R1
   \   00000014   0060E0E3           MVN      R6,#+0
     23          
     24            if ((buf=new char[len]))
   \   00000018   0700A0E1           MOV      R0,R7
   \   0000001C   ........           _BLF     `??operator new[]`,`??operator new[]??rA`
   \   00000020   0080B0E1           MOVS     R8,R0
   \   00000024   3600000A           BEQ      ??LoadConfigData_2
     25            {
     26              if (fstat(path,fname,&_fstat)!=-1)
   \   00000028   0D20A0E1           MOV      R2,SP
   \   0000002C   0510A0E1           MOV      R1,R5
   \   00000030   0400A0E1           MOV      R0,R4
   \   00000034   1C0100EF           SWI      +284
   \   00000038   010070E3           CMN      R0,#+1
   \   0000003C   1900000A           BEQ      ??LoadConfigData_3
     27              {
     28                if ((f=_fopen(path,fname,0x001,0x180,0))>=0)
   \   00000040   0000A0E3           MOV      R0,#+0
   \   00000044   01002DE9           PUSH     {R0}
   \   00000048   603FA0E3           MOV      R3,#+384
   \   0000004C   0120A0E3           MOV      R2,#+1
   \   00000050   0510A0E1           MOV      R1,R5
   \   00000054   0400A0E1           MOV      R0,R4
   \   00000058   160100EF           SWI      +278
   \   0000005C   00A0B0E1           MOVS     R10,R0
   \   00000060   04D08DE2           ADD      SP,SP,#+4
   \   00000064   2000004A           BMI      ??LoadConfigData_4
     29                {
     30                  rlen=fread(f,buf,len);
   \   00000068   0720A0E1           MOV      R2,R7
   \   0000006C   0810A0E1           MOV      R1,R8
   \   00000070   180100EF           SWI      +280
   \   00000074   0090A0E1           MOV      R9,R0
     31                  fclose(f);
   \   00000078   0A00A0E1           MOV      R0,R10
   \   0000007C   170100EF           SWI      +279
     32                  if (rlen!=_fstat.fsize || rlen!=len)  goto L_SAVENEWCFG;
   \   00000080   08009DE5           LDR      R0,[SP, #+8]
   \   00000084   000059E1           CMP      R9,R0
   \   00000088   07005901           CMPEQ    R9,R7
   \   0000008C   0500001A           BNE      ??LoadConfigData_3
     33                  memcpy(cfg,buf,len);
   \   00000090   7C009FE5           LDR      R0,??LoadConfigData_1+0x4  ;; SFB(CONFIG_C)
   \   00000094   0720A0E1           MOV      R2,R7
   \   00000098   0810A0E1           MOV      R1,R8
   \   0000009C   130100EF           SWI      +275
     34                  result=0;
   \   000000A0   0060A0E3           MOV      R6,#+0
   \   000000A4   100000EA           B        ??LoadConfigData_4
     35                }
     36              }
     37              else
     38              {
     39              L_SAVENEWCFG:
     40                if ((f=_fopen(path,fname,0x204,0x180,0))>=0)
   \                     ??LoadConfigData_3:
   \   000000A8   0000A0E3           MOV      R0,#+0
   \   000000AC   01002DE9           PUSH     {R0}
   \   000000B0   603FA0E3           MOV      R3,#+384
   \   000000B4   812FA0E3           MOV      R2,#+516
   \   000000B8   0510A0E1           MOV      R1,R5
   \   000000BC   0400A0E1           MOV      R0,R4
   \   000000C0   160100EF           SWI      +278
   \   000000C4   00A0B0E1           MOVS     R10,R0
   \   000000C8   04D08DE2           ADD      SP,SP,#+4
   \   000000CC   0600004A           BMI      ??LoadConfigData_4
     41                {
     42                  if (fwrite(f,cfg,len)==len) result=0;
   \   000000D0   3C109FE5           LDR      R1,??LoadConfigData_1+0x4  ;; SFB(CONFIG_C)
   \   000000D4   0720A0E1           MOV      R2,R7
   \   000000D8   190100EF           SWI      +281
   \   000000DC   070050E1           CMP      R0,R7
   \   000000E0   0060A003           MOVEQ    R6,#+0
     43                  fclose(f);
   \   000000E4   0A00A0E1           MOV      R0,R10
   \   000000E8   170100EF           SWI      +279
     44                }
     45              }
     46              delete buf;
   \                     ??LoadConfigData_4:
   \   000000EC   0800A0E1           MOV      R0,R8
   \   000000F0   ........           _BLF     `??operator delete`,`??operator delete??rA`
     47            }
     48            if (result>=0)
   \   000000F4   000056E3           CMP      R6,#+0
     49            {
     50              successed_config_path=path;
   \   000000F8   18009F55           LDRPL    R0,??LoadConfigData_1+0x8  ;; successed_config_path
   \   000000FC   00408055           STRPL    R4,[R0, #+0]
     51              successed_config_name=fname;
   \   00000100   04508055           STRPL    R5,[R0, #+4]
     52            }
     53            return(result);
   \                     ??LoadConfigData_2:
   \   00000104   0600A0E1           MOV      R0,R6
   \   00000108   1CD08DE2           ADD      SP,SP,#+28
   \   0000010C   F087BDE8           POP      {R4-R10,PC}      ;; return
   \                     ??LoadConfigData_1:
   \   00000110   ........           DC32     SFE(CONFIG_C) - SFB(CONFIG_C)
   \   00000114   ........           DC32     SFB(CONFIG_C)
   \   00000118   ........           DC32     successed_config_path
     54          }
     55          
     56          

   \                                 In segment CODE, align 4, keep-with-next
     57          void InitConfig(void)
     58          {
   \                     ??InitConfig:
   \   00000000   00402DE9           PUSH     {LR}
     59            if (LoadConfigData(GetDir(DIR_ELFS_CONFIG|MEM_EXTERNAL),L"AnoyingAlarm.bcfg")<0)
   \   00000004   1400A0E3           MOV      R0,#+20
   \   00000008   050100EF           SWI      +261
   \   0000000C   1C109FE5           LDR      R1,??InitConfig_1  ;; `?<Constant L"\\x41\\x6e\\x6f\\x79\\x69\\x6e\\x67\\x41\\`
   \   00000010   ........           BL       ??LoadConfigData
   \   00000014   000050E3           CMP      R0,#+0
   \   00000018   0080BD58           POPPL    {PC}
     60            {
     61              LoadConfigData(GetDir(DIR_ELFS_CONFIG|MEM_INTERNAL),L"AnoyingAlarm.bcfg");
   \   0000001C   1500A0E3           MOV      R0,#+21
   \   00000020   050100EF           SWI      +261
   \   00000024   04109FE5           LDR      R1,??InitConfig_1  ;; `?<Constant L"\\x41\\x6e\\x6f\\x79\\x69\\x6e\\x67\\x41\\`
   \   00000028   ........           BL       ??LoadConfigData
     62            }
     63          }
   \   0000002C   0080BDE8           POP      {PC}             ;; return
   \                     ??InitConfig_1:
   \   00000030   ........           DC32     `?<Constant L"\\x41\\x6e\\x6f\\x79\\x69\\x6e\\x67\\x41\\`

   \                                 In segment DATA_ID, align 4, align-sorted
   \                     `?<Initializer for successed_config_path>`:
   \   00000000   ........           DC32 `?<Constant L"">`
   \                     `?<Initializer for successed_config_name>`:
   \   00000004   ........           DC32 `?<Constant L"">`

   \                                 In segment CONFIG_C, align 1

   \                                 In segment DATA_C, align 2, align-sorted
   \                     `?<Constant L"">`:
   \   00000000   0000               DC8 0, 0

   \                                 In segment DATA_C, align 4, align-sorted
   \                     `?<Constant L"\\x41\\x6e\\x6f\\x79\\x69\\x6e\\x67\\x41\\`:
   \   00000000   41006E006F00       DC8 41H, 0, 6EH, 0, 6FH, 0, 79H, 0
   \              7900        
   \   00000008   69006E006700       DC8 69H, 0, 6EH, 0, 67H, 0, 41H, 0
   \              4100        
   \   00000010   6C0061007200       DC8 6CH, 0, 61H, 0, 72H, 0, 6DH, 0
   \              6D00        
   \   00000018   2E0062006300       DC8 2EH, 0, 62H, 0, 63H, 0, 66H, 0
   \              6600        
   \   00000020   67000000           DC8 67H, 0, 0, 0

   Maximum stack usage in bytes:

     Function                       CSTACK
     --------                       ------
     InitConfig()                       4
     LoadConfigData(wchar_t const *, wchar_t const *)
                                       64


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     successed_config_path             8
     LoadConfigData(wchar_t const *, wchar_t const *)
                                     284
     InitConfig()                     52
     ?<Initializer for successed_config_path>
                                       8
     ?<Constant L"">                   2
     ?<Constant L"\x41\x6e\x6f\x79\x69\x6e\x67\x41\
                                      36
      Others                          44

 
 368 bytes in segment CODE
  38 bytes in segment DATA_C
   8 bytes in segment DATA_I
   8 bytes in segment DATA_ID
  12 bytes in segment INITTAB
 
 336 bytes of CODE  memory (+ 44 bytes shared)
  46 bytes of CONST memory
   8 bytes of DATA  memory

Errors: none
Warnings: none
