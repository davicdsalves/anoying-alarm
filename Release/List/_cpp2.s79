//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR ARM ANSI C/C++ Compiler V4.42A/W32 EVALUATION   12/Feb/2011  21:40:26 /
// Copyright 1999-2005 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Cpu mode        =  interwork                                           /
//    Endian          =  little                                              /
//    Stack alignment =  4                                                   /
//    Source file     =  C:\Users\Faby\Desktop\StudyElf\C++\_cpp2.cpp        /
//    Command line    =  C:\Users\Faby\Desktop\StudyElf\C++\_cpp2.cpp -D     /
//                       NDEBUG -D OLDFUNCTIONS -lCN                         /
//                       "C:\Users\Faby\Desktop\StudyElf\Anoying             /
//                       Alarm\Release\List\" -la                            /
//                       "C:\Users\Faby\Desktop\StudyElf\Anoying             /
//                       Alarm\Release\List\" -o "C:\Users\Faby\Desktop\Stud /
//                       yElf\Anoying Alarm\Release\Obj\" -s9 --no_unroll    /
//                       --no_code_motion --cpu_mode arm --endian little     /
//                       --cpu ARM926EJ-S --stack_align 4 --interwork -e     /
//                       --enable_multibytes --fpu None --eec++              /
//                       --dlib_config "C:\Users\Faby\EmbebedIAR\Embedded    /
//                       Workbench 4.0 Evaluation\ARM\LIB\dl5tpainl8n.h" -I  /
//                       "C:\Users\Faby\EmbebedIAR\Embedded Workbench 4.0    /
//                       Evaluation\ARM\INC\" --inline_threshold=2           /
//    List file       =  C:\Users\Faby\Desktop\StudyElf\Anoying              /
//                       Alarm\Release\List\_cpp2.s79                        /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME _cpp2

        RTMODEL "StackAlign4", "USED"
        RTMODEL "__cpu_mode", "__pcs__interwork"
        RTMODEL "__data_model", "absolute"
        RTMODEL "__endian", "little"
        RTMODEL "__rt_version", "6"

        RSEG CSTACK:DATA:NOROOT(2)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

        PUBLIC `??operator delete`
        FUNCTION `??operator delete`,0203H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK `??operator delete??rT`
        MULTWEAK `??operator delete??rT_1`
        PUBLIC `??operator delete[]`
        FUNCTION `??operator delete[]`,0203H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK `??operator delete[]??rT`
        MULTWEAK `??operator delete[]??rT_1`
        PUBLIC `??operator delete[]_1`
        FUNCTION `??operator delete[]_1`,0203H
        PUBLIC `??operator delete_1`
        FUNCTION `??operator delete_1`,0203H
        PUBLIC `??operator new`
        FUNCTION `??operator new`,0203H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK `??operator new??rT`
        MULTWEAK `??operator new??rT_1`
        PUBLIC `??operator new[]`
        FUNCTION `??operator new[]`,0203H
        LOCFRAME CSTACK, 4, STACK
        MULTWEAK `??operator new[]??rT`
        MULTWEAK `??operator new[]??rT_1`
        PUBLIC `??operator new[]_1`
        FUNCTION `??operator new[]_1`,0203H
        PUBLIC `??operator new_1`
        FUNCTION `??operator new_1`,0203H
        
        CFI Names cfiNames0
        CFI StackFrame CFA R13 HUGEDATA
        CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
        CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, CPSR:32, R13:32
        CFI Resource R14:32, SPSR:32
        CFI VirtualResource ?RET:32
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 2
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 4
        CFI DataAlign 4
        CFI ReturnAddress ?RET CODE
        CFI CFA R13+0
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 Undefined
        CFI CPSR SameValue
        CFI R14 Undefined
        CFI SPSR SameValue
        CFI ?RET R14
        CFI EndCommon cfiCommon1
        

`??operator delete??rT` SYMBOL "??rT", `??operator delete`

`??operator delete??rT_1` SYMBOL "??rT", `??operator delete_1`

`??operator delete[]??rT` SYMBOL "??rT", `??operator delete[]`

`??operator delete[]??rT_1` SYMBOL "??rT", `??operator delete[]_1`

`??operator new??rT` SYMBOL "??rT", `??operator new`

`??operator new??rT_1` SYMBOL "??rT", `??operator new_1`

`??operator new[]??rT` SYMBOL "??rT", `??operator new[]`

`??operator new[]??rT_1` SYMBOL "??rT", `??operator new[]_1`


        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock0 Using cfiCommon0
        CFI NoFunction
        THUMB
`??operator new??rT`:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock0
        REQUIRE `??operator new`

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock1 Using cfiCommon1
        CFI Function `??operator new`
        ARM
`??operator new`:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        SWI      +259
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock1

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        THUMB
`??operator new[]??rT`:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock2
        REQUIRE `??operator new[]`

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock3 Using cfiCommon1
        CFI Function `??operator new[]`
        ARM
`??operator new[]`:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        SWI      +259
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock3

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        THUMB
`??operator delete??rT`:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock4
        REQUIRE `??operator delete`

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock5 Using cfiCommon1
        CFI Function `??operator delete`
        ARM
`??operator delete`:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        SWI      +260
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock5

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        THUMB
`??operator delete[]??rT`:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock6
        REQUIRE `??operator delete[]`

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock7 Using cfiCommon1
        CFI Function `??operator delete[]`
        ARM
`??operator delete[]`:
        PUSH     {LR}
        CFI ?RET Frame(CFA, -4)
        CFI CFA R13+4
        SWI      +260
        POP      {PC}             ;; return
        CFI EndBlock cfiBlock7

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        THUMB
`??operator new??rT_1`:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock8
        REQUIRE `??operator new_1`

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock9 Using cfiCommon1
        CFI Function `??operator new_1`
        ARM
`??operator new_1`:
        MOV      R0,R1
        BX       LR               ;; return
        CFI EndBlock cfiBlock9

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock10 Using cfiCommon0
        CFI NoFunction
        THUMB
`??operator new[]??rT_1`:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock10
        REQUIRE `??operator new[]_1`

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock11 Using cfiCommon1
        CFI Function `??operator new[]_1`
        ARM
`??operator new[]_1`:
        MOV      R0,R1
        BX       LR               ;; return
        CFI EndBlock cfiBlock11

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock12 Using cfiCommon0
        CFI NoFunction
        THUMB
`??operator delete??rT_1`:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock12
        REQUIRE `??operator delete_1`

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock13 Using cfiCommon1
        CFI Function `??operator delete_1`
        ARM
`??operator delete_1`:
        BX       LR               ;; return
        CFI EndBlock cfiBlock13

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock14 Using cfiCommon0
        CFI NoFunction
        THUMB
`??operator delete[]??rT_1`:
        BX       PC
        Nop      
        CFI EndBlock cfiBlock14
        REQUIRE `??operator delete[]_1`

        RSEG CODE:CODE:NOROOT(2)
        CFI Block cfiBlock15 Using cfiCommon1
        CFI Function `??operator delete[]_1`
        ARM
`??operator delete[]_1`:
        BX       LR               ;; return
        CFI EndBlock cfiBlock15

        END
// 
// 104 bytes in segment CODE
// 
// 72 bytes of CODE memory (+ 32 bytes shared)
//
//Errors: none
//Warnings: none
